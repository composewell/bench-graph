{-# OPTIONS_GHC -fno-warn-unused-imports #-}
-- |
-- Module      : BenchGraph.Tutorial
-- Copyright   : (c) 2018 Composewell Technologies
--
-- License     : BSD3
-- Maintainer  : harendra.kumar@gmail.com
--
-- BenchGraph generates reports and graphs from benchmarking results. It is
-- very flexible and allows you to manipulate the benchmarking data to present
-- it in many useful ways.

module BenchGraph.Tutorial
    (
    -- * Plotting benchmark results
    -- $plotting

    -- * Grouping and comparing benchmarks
    -- $grouping

    -- * Plotting regression runs
    -- $regression
    )
where

import BenchGraph

-- $plotting
--
-- The input file may contain results from a single benchmark run or multiple
-- benchmark runs. When it contains results from a single benchmark run, by
-- default all the benchmarks are placed in a single benchmark group named
-- "default". A bar chart containing all the benchmarks is plotted as a single
-- cluster named "default".
--
-- For example if you have the following benchmarks in @results.csv@:
--
-- @
-- Name,Mean,MeanLB,MeanUB,Stddev,StddevLB,StddevUB
-- vector/fold,8.970816964261911e-3,8.862875920178561e-3,9.159107224733846e-3,4.3287357257695955e-4,2.5534154958464816e-4,7.238306298385503e-4
-- streamly/fold,1.755309435106302e-2,1.7310624800648617e-2,1.786907805026368e-2,7.049759968657329e-4,4.896602420577079e-4,1.0970893394124349e-3
-- vector/zip,8.439519884529081e-3,8.322484519043615e-3,8.553844851414171e-3,3.3336620855519626e-4,2.615245833250649e-4,4.433041414291662e-4
-- streamly/zip,2.960114434592148e-2,2.909611153048501e-2,3.0209059319444443e-2,1.2463149958692676e-3,9.648307161949952e-4,1.5900987042219415e-3
-- vector/map,6.972814233286865e-3,6.885884902697828e-3,7.0855299307407e-3,3.147049577997673e-4,2.2830378407806494e-4,3.9990241048623186e-4
-- streamly/map,2.4673020708256527e-2,2.4255486660085725e-2,2.5206941798400755e-2,1.0755879349327528e-3,8.416234913425323e-4,1.4385335356088132e-3
-- @
--
-- The following code plots all the benchmarks in the file:
--
-- @
-- 'bgraph' "results.csv" "output" "mean" 'defaultConfig'
-- @
--
-- <<mean-full.svg Mean Time Full>>

-- $grouping
--
-- We can split the benchmarks in multiple groups using the
-- 'classifyBenchmarks' config option. For example we can classify the
-- @streamly/@ benchmarks in the "streamly" group and @vector/@ benchmarks in
-- the "vector" group. Note that all the groups generated by
-- 'classifyBenchmarks' must have benchmarks with the same names. The
-- source names may not necessarily be the same but they must be mapped to
-- common target names.
--
-- @
--    let classifier name =
--            case splitOn "/" name of
--                grp : rest -> Just (grp, concat rest)
--                _      -> Nothing
--    bgraph "results.csv" "mean-grouped" "mean" defaultConfig
--        { classifyBenchmark = classifier }
-- @
--
-- Each group is placed as a cluster on the graph. Multiple clusters are placed
-- side by side (i.e. on the same scale) for easy comparison. For example:
--
-- <<mean-grouped.svg Mean Time Grouped>>
--
-- If you want to use the first group as baseline and want to plot the
-- difference from the baseline for the subsequent groups you can do that using
-- 'CompareDelta' 'ComparisonStyle'.
--
-- @
--    bgraph "results.csv" "mean-grouped" "mean" defaultConfig
--        { classifyBenchmark = classifier
--        , comparisonStyle = CompareDelta
--        }
-- @
--
-- The second cluster plots the difference @streamly - vector@.
--
-- <<mean-grouped-delta.svg Mean Time Grouped Delta>>

-- $regression
--
-- When the input file contains benchmarks from multiple runs. We can compare
-- benchmarks across runs. Benchgraph automatically detects multiple runs when
-- the benchmark names are repeated in the results file. When the benchmarks in
-- a group are repeated, another group with the same name but suffixec with an
-- index is created e.g. if the group "streamly" repeats once we name the first
-- instance as "streamly (1)" and the second instance as "streamly (2)" and so
-- on.
--
-- The most common usage for regression runs is to append multiple runs in a
-- single rresults file, classify the benchmarks in a single group and the
-- repeated runs automatically get the same group name with indexes and all
-- these groups are plotted side by side.
--
-- Given the following results file with two runs appended:
--
-- @
-- Name,Mean,MeanLB,MeanUB,Stddev,StddevLB,StddevUB
-- streamly/fold,1.755309435106302e-2,1.7310624800648617e-2,1.786907805026368e-2,7.049759968657329e-4,4.896602420577079e-4,1.0970893394124349e-3
-- streamly/zip,2.960114434592148e-2,2.909611153048501e-2,3.0209059319444443e-2,1.2463149958692676e-3,9.648307161949952e-4,1.5900987042219415e-3
-- streamly/map,2.4673020708256527e-2,2.4255486660085725e-2,2.5206941798400755e-2,1.0755879349327528e-3,8.416234913425323e-4,1.4385335356088132e-3
-- Name,Mean,MeanLB,MeanUB,Stddev,StddevLB,StddevUB
-- streamly/fold,8.970816964261911e-3,8.862875920178561e-3,9.159107224733846e-3,4.3287357257695955e-4,2.5534154958464816e-4,7.238306298385503e-4
-- streamly/zip,8.439519884529081e-3,8.322484519043615e-3,8.553844851414171e-3,3.3336620855519626e-4,2.615245833250649e-4,4.433041414291662e-4
-- streamly/map,6.972814233286865e-3,6.885884902697828e-3,7.0855299307407e-3,3.147049577997673e-4,2.2830378407806494e-4,3.9990241048623186e-4
-- @
--
-- This code generates the graph that follows:
--
-- @
--    bgraph "results.csv" "mean-regression" "mean" defaultConfig
--        { classifyBenchmark = classifier
--        , comparisonStyle = CompareDelta
--        }
-- @
--
-- <<mean-regression.svg Mean Time Regression>>
--
